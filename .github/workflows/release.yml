name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag to release/update (e.g., v0.2.1)'
        required: true
        type: string

env:
  CARGO_TERM_COLOR: always

# Ensure GITHUB_TOKEN has the rights to create releases and upload assets
permissions:
  contents: write

jobs:
  create-release:
    if: ${{ github.event_name == 'push' }}
    runs-on: ubuntu-latest
    outputs:
      release_id: ${{ steps.create-release.outputs.id }}
      upload_url: ${{ steps.create-release.outputs.upload_url }}
    steps:
    - uses: actions/checkout@v4
    - name: Extract version from tag
      id: vars
      shell: bash
      run: |
        TAG="${GITHUB_REF#refs/tags/}"
        VER="${TAG#v}"
        echo "TAG=$TAG" >> $GITHUB_ENV
        echo "VER=$VER" >> $GITHUB_ENV

    - name: Extract changelog section
      id: changelog
      shell: bash
      run: |
        node .github/scripts/extract-changelog.cjs "$VER" > RELEASE_BODY.md
        echo "body_path=RELEASE_BODY.md" >> $GITHUB_OUTPUT

    - name: Create Release
      id: create-release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ env.TAG }}
        release_name: MarkReview ${{ env.TAG }}
        body_path: ${{ steps.changelog.outputs.body_path }}
        draft: false
        prerelease: false

  build-tauri:
    runs-on: ${{ matrix.platform }}
    needs: create-release
    
    strategy:
      fail-fast: false
      matrix:
        platform: [windows-latest, macos-latest]
        
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '22'
        cache: 'npm'
    
    - name: Install Rust stable
      uses: dtolnay/rust-toolchain@stable
    
    - name: Rust cache
      uses: swatinem/rust-cache@v2
      with:
        workspaces: './src-tauri -> target'
    
    # Linux build disabled for release
    
    - name: Install dependencies (macOS only)
      if: matrix.platform == 'macos-latest'
      run: npm ci
    
    - name: Install dependencies (Windows only)
      if: matrix.platform == 'windows-latest'
      run: npm ci

    - name: Install NSIS (Windows only)
      if: matrix.platform == 'windows-latest'
      run: choco install nsis -y
    
    - name: Install Tauri CLI
      run: npm install -g @tauri-apps/cli
    
    - name: Build Tauri application (Windows)
      if: matrix.platform == 'windows-latest'
      run: npm run tauri build
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        TAURI_BUNDLE_TARGETS: nsis

    - name: Build Tauri application (macOS)
      if: matrix.platform == 'macos-latest'
      run: npm run tauri build
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        TAURI_BUNDLE_TARGETS: dmg

    # Linux build disabled for release
    
    - name: Resolve Windows NSIS artifact
      if: matrix.platform == 'windows-latest'
      shell: pwsh
      run: |
        $file = Get-ChildItem -Path "src-tauri/target/release/bundle/nsis" -Filter *.exe -Recurse | Select-Object -ExpandProperty FullName -First 1
        if (-not $file) { Write-Error "NSIS installer not found"; exit 1 }
        ("NSIS_PATH=$file") | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
        ("NSIS_NAME=" + (Split-Path $file -Leaf)) | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

    - name: Upload Windows NSIS
      if: matrix.platform == 'windows-latest'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ${{ env.NSIS_PATH }}
        asset_name: ${{ env.NSIS_NAME }}
        asset_content_type: application/octet-stream

    - name: Resolve Windows MSI artifact
      if: matrix.platform == 'windows-latest'
      shell: pwsh
      run: |
        $file = Get-ChildItem -Path "src-tauri/target/release/bundle/msi" -Filter *.msi -Recurse | Select-Object -ExpandProperty FullName -First 1
        if (-not $file) { Write-Error "MSI not found"; exit 1 }
        ("MSI_PATH=$file") | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
        ("MSI_NAME=" + (Split-Path $file -Leaf)) | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

    - name: Upload Windows MSI
      if: matrix.platform == 'windows-latest'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ${{ env.MSI_PATH }}
        asset_name: ${{ env.MSI_NAME }}
        asset_content_type: application/octet-stream
    
    - name: Resolve macOS DMG artifact
      if: matrix.platform == 'macos-latest'
      shell: bash
      run: |
        file=$(ls -1 src-tauri/target/release/bundle/dmg/*.dmg | head -n 1)
        if [[ -z "$file" ]]; then echo "DMG not found"; exit 1; fi
        echo "DMG_PATH=$file" >> $GITHUB_ENV
        echo "DMG_NAME=$(basename "$file")" >> $GITHUB_ENV

    - name: Upload macOS DMG
      if: matrix.platform == 'macos-latest'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ${{ env.DMG_PATH }}
        asset_name: ${{ env.DMG_NAME }}
        asset_content_type: application/octet-stream
    
    # Linux artifacts upload disabled for release

  update-notes-only:
    if: ${{ github.event_name == 'workflow_dispatch' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

    - name: Extract version from input tag
      id: vars
      shell: bash
      run: |
        TAG="${{ inputs.tag }}"
        VER="${TAG#v}"
        echo "TAG=$TAG" >> $GITHUB_ENV
        echo "VER=$VER" >> $GITHUB_ENV

    - name: Extract changelog section
      id: changelog
      shell: bash
      run: |
        node .github/scripts/extract-changelog.cjs "$VER" > RELEASE_BODY.md

    - name: Update release notes
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const body = fs.readFileSync('RELEASE_BODY.md', 'utf8');
          const { data: rel } = await github.rest.repos.getReleaseByTag({
            owner: context.repo.owner,
            repo: context.repo.repo,
            tag: process.env.TAG,
          });
          await github.rest.repos.updateRelease({
            owner: context.repo.owner,
            repo: context.repo.repo,
            release_id: rel.id,
            body,
          });

  build-assets-existing-release:
    if: ${{ github.event_name == 'workflow_dispatch' }}
    needs: update-notes-only
    runs-on: ${{ matrix.platform }}
    strategy:
      fail-fast: false
      matrix:
        platform: [windows-latest, macos-latest]
    steps:
      - uses: actions/checkout@v4

      - name: Resolve release upload_url by tag
        id: rel
        uses: actions/github-script@v7
        with:
          script: |
            const { tag } = context.payload.inputs;
            const { data: rel } = await github.rest.repos.getReleaseByTag({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag,
            });
            core.setOutput('upload_url', rel.upload_url);

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'

      - name: Install Rust stable
        uses: dtolnay/rust-toolchain@stable

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri -> target'

      - name: Install dependencies (macOS only)
        if: matrix.platform == 'macos-latest'
        run: npm ci

      - name: Install dependencies (Windows only)
        if: matrix.platform == 'windows-latest'
        run: npm ci

      - name: Install NSIS (Windows only)
        if: matrix.platform == 'windows-latest'
        run: choco install nsis -y

      - name: Install Tauri CLI
        run: npm install -g @tauri-apps/cli

      - name: Build Tauri application (Windows)
        if: matrix.platform == 'windows-latest'
        run: npm run tauri build
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAURI_BUNDLE_TARGETS: nsis

      - name: Build Tauri application (macOS)
        if: matrix.platform == 'macos-latest'
        run: npm run tauri build
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAURI_BUNDLE_TARGETS: dmg

      - name: Resolve Windows NSIS artifact
        if: matrix.platform == 'windows-latest'
        shell: pwsh
        run: |
          $file = Get-ChildItem -Path "src-tauri/target/release/bundle/nsis" -Filter *.exe -Recurse | Select-Object -ExpandProperty FullName -First 1
          if (-not $file) { Write-Error "NSIS installer not found"; exit 1 }
          ("NSIS_PATH=$file") | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          ("NSIS_NAME=" + (Split-Path $file -Leaf)) | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

      - name: Upload Windows NSIS
        if: matrix.platform == 'windows-latest'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.rel.outputs.upload_url }}
          asset_path: ${{ env.NSIS_PATH }}
          asset_name: ${{ env.NSIS_NAME }}
          asset_content_type: application/octet-stream

      - name: Resolve Windows MSI artifact
        if: matrix.platform == 'windows-latest'
        shell: pwsh
        run: |
          $file = Get-ChildItem -Path "src-tauri/target/release/bundle/msi" -Filter *.msi -Recurse | Select-Object -ExpandProperty FullName -First 1
          if (-not $file) { Write-Error "MSI not found"; exit 1 }
          ("MSI_PATH=$file") | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          ("MSI_NAME=" + (Split-Path $file -Leaf)) | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

      - name: Upload Windows MSI
        if: matrix.platform == 'windows-latest'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.rel.outputs.upload_url }}
          asset_path: ${{ env.MSI_PATH }}
          asset_name: ${{ env.MSI_NAME }}
          asset_content_type: application/octet-stream

      - name: Resolve macOS DMG artifact
        if: matrix.platform == 'macos-latest'
        shell: bash
        run: |
          file=$(ls -1 src-tauri/target/release/bundle/dmg/*.dmg | head -n 1)
          if [[ -z "$file" ]]; then echo "DMG not found"; exit 1; fi
          echo "DMG_PATH=$file" >> $GITHUB_ENV
          echo "DMG_NAME=$(basename "$file")" >> $GITHUB_ENV

      - name: Upload macOS DMG
        if: matrix.platform == 'macos-latest'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.rel.outputs.upload_url }}
          asset_path: ${{ env.DMG_PATH }}
          asset_name: ${{ env.DMG_NAME }}
          asset_content_type: application/octet-stream
